# ============================
# nginx/default.conf.template (updated)
# ============================

# Upgrade WebSocket connections automatically when needed.
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Define a flag based on NGINX_ENV to control HTTPS redirection.
# When NGINX_ENV=production, $redirect_to_https will be set to 1, otherwise 0.
map $NGINX_ENV $redirect_to_https {
    production 1;
    default    0;
}

# HTTP server – handles both development and production.
# In production it redirects all requests to HTTPS on port 443.  
# In development it proxies API and frontend dev server on port 3000.
server {
    listen 80;
    server_name ${DOMAIN:-localhost};

    # Location used by Let's Encrypt ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Health check endpoint for Nginx.  This always returns 200 OK
    # and is used by Docker HEALTHCHECK in the Nginx image.
    location = /healthz {
        return 200 'ok';
        add_header Content-Type text/plain;
    }

    # If the environment is production, redirect all HTTP traffic to HTTPS.
    # Use the $redirect_to_https flag from the map above to conditionally
    # perform the redirect without relying on deprecated "return ... if" syntax.
    if ($redirect_to_https) {
        return 301 https://$host$request_uri;
    }

    # Development proxy rules (only used when $redirect_to_https is 0)
    # Proxy API requests to the backend service on port 5000.
    location /api/ {
        proxy_pass http://backend:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Proxy all other requests to the React dev server on port 3000.
    location / {
        proxy_pass http://frontend:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}

# HTTPS server – only active in production.
# Serves the built React static files and proxies `/api` to the backend.
server {
    listen 443 ssl http2;
    server_name ${DOMAIN:-localhost};

    ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Basic security headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy no-referrer-when-downgrade always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Proxy API requests to the backend service
    location /api/ {
        proxy_pass http://backend:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Serve built React assets
    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # ACME challenge path for HTTPS (optional; not used by certbot renew)
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Health check endpoint for HTTPS as well
    location = /healthz {
        return 200 'ok';
        add_header Content-Type text/plain;
    }
}
